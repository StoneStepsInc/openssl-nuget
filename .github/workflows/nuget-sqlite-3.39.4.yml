#
# The version part is immutable in the name, but the package revision
# component after the dash should be kept in sync with `PKG_REV`.
# GitHub doesn't allow variables in the workflow names, so this cannot
# be automated.
#
# For new SQLite versions, rename this file with a new version name
# to restart build numbers from `1`. This is necessary because GitHub
# maintains build numbers per workflow file name.
#
name: SQLite v3.39.4-1

#
# When `publish-package` is set to `yes`, the workflow will build
# the package and publish it to nuget.org. Otherwise, a package
# will be built as an artifact and may be downloaded via GitHub UI.
#
# Published Nuget package will use the 4th version component as a
# package revision number because Nuget lacks package revision
# support.
#
# Without publishing, a Nuget package will be uploaded as a workflow
# artifact and will be named using a pre-release version, which is
# an unfortunate workaround for a lack of build promotion support
# between GitHub and Nuget. This means that true pre-release packages
# will conflict with CI packages, but for this repository this is
# not an issue that will ever need to be addressed.
#
on:
  workflow_dispatch:
    inputs:
      publish-package:
        description: Publish Nuget Package (yes/no)?
        required: false

#
# For each new SQLite release, change these variables:
#
#   * PKG_VER
#
# For each change in `PKG_VER`, `PKG_REV` must be reset to `1` (one).
#
# Package revision should be incremented by one every time package
# content is changed in any way, such as changing compiler options,
# adding or removing files, changing any text in README files, etc.
#
env:
  PKG_VER: '3.39.4'
  PKG_REV: 1
  SQLITE_FNAME: sqlite-amalgamation-3390400
  SQLITE_URL_BASE: 'https://www.sqlite.org/2022'
  BUILD_NUMBER: ${{ github.run_number }}

  SQLITE_SHA256: 87775784f8b22d0d0f1d7811870d39feaa7896319c7c20b849a4181c5a50609b

  # for VS Community Edition, replace `Enterprise` with `Community` in the path
  VCVARSALL: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall'

  # Nuget Gallery (www.nuget.org) publish URL
  NUGET_PUB_URL: https://api.nuget.org/v3/index.json

defaults:
  run:
    shell: cmd

jobs:
  build-sqlite:
    name: Build sqlite
    runs-on: windows-2019
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Download SQLite
      run: |
        curl --output ${{ env.SQLITE_FNAME }}.zip ${{ env.SQLITE_URL_BASE }}/${{ env.SQLITE_FNAME }}.zip

    - name: Verify SQLite checksum
      run: 7z h -scrcSHA256 ${{ env.SQLITE_FNAME }}.zip | findstr /C:"SHA256 for data" | call devops\check-sha256 "${{ env.SQLITE_SHA256 }}"

      # ${{ env.SQLITE_FNAME }} is the top directory in the archive
    - name: Extract SQLite
      run: |
        7z x ${{ env.SQLITE_FNAME }}.zip

    - name: Build x64/Release
      working-directory: ${{ env.SQLITE_FNAME }}
      run: |
        mkdir Release
        call "${{ env.VCVARSALL }}" x64

        cl /c /MD /O2 /DNDEBUG /FoRelease\ sqlite3.c
        lib /MACHINE:X64 /OUT:Release\sqlite3.lib Release\sqlite3.obj

        cl /MD /O2 /DNDEBUG /FeRelease\sqlite3.exe sqlite3.c shell.c

    - name: Build x64/Debug
      working-directory: ${{ env.SQLITE_FNAME }}
      run: |
        mkdir Debug
        call "${{ env.VCVARSALL }}" x64

        cl /c /MDd /O2 /Zi /DNDEBUG /FoDebug\ sqlite3.c
        lib /MACHINE:X64 /OUT:Debug\sqlite3.lib Debug\sqlite3.obj

    - name: Collect build artifacts
      run: |
        mkdir nuget\build\native\include
        copy /Y ${{ env.SQLITE_FNAME }}\*.h nuget\build\native\include\

        mkdir nuget\build\native\bin
        copy /Y ${{ env.SQLITE_FNAME }}\Release\sqlite3.exe nuget\build\native\bin

        mkdir nuget\build\native\lib\x64\Release
        copy /Y ${{ env.SQLITE_FNAME }}\Release\sqlite3.lib nuget\build\native\lib\x64\Release

        mkdir nuget\build\native\lib\x64\Debug
        copy /Y ${{ env.SQLITE_FNAME }}\Debug\sqlite3.lib nuget\build\native\lib\x64\Debug
        copy /Y ${{ env.SQLITE_FNAME }}\*.pdb nuget\build\native\lib\x64\Debug

    - name: Clean up
      run: |
        rmdir /S /Q ${{ env.SQLITE_FNAME }}
        del /Q ${{ env.SQLITE_FNAME }}.zip

      # this is an unconventional use of the pre-release version - see README.md
    - name: Make CI Nuget package
      if: ${{ github.event.inputs.publish-package != 'yes' }}
      run: |
        nuget pack nuget\StoneSteps.SQLite.Static.nuspec -Suffix "ci.%BUILD_NUMBER%" -Version ${{ env.PKG_VER }}.${{ env.PKG_REV }}

    - name: Upload CI Nuget package
      if: ${{ github.event.inputs.publish-package != 'yes' }}
      uses: actions/upload-artifact@v2.2.1
      with:
        name: SQLite CI Nuget package
        path: StoneSteps.SQLite.Static.${{ env.PKG_VER }}.${{ env.PKG_REV }}-ci.${{ env.BUILD_NUMBER }}.nupkg

      #
      # Use `-Version` explicitly to override the version in the manifest,
      # so we can usurp the 4th version component for the package revision.
      #
    - name: Make Nuget package
      if: ${{ github.event.inputs.publish-package == 'yes' }}
      run: |
        nuget pack nuget\StoneSteps.SQLite.Static.nuspec -Version ${{ env.PKG_VER }}.${{ env.PKG_REV }}

    - name: Publish Nuget package
      if: ${{ github.event.inputs.publish-package == 'yes' }}
      run: |
        nuget push StoneSteps.SQLite.Static.${{ env.PKG_VER }}.${{ env.PKG_REV }}.nupkg -Source ${{ env.NUGET_PUB_URL }} -ApiKey "${{ secrets.NUGET_API_KEY }}" -NonInteractive
